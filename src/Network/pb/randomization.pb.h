// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: randomization.proto

#ifndef PROTOBUF_randomization_2eproto__INCLUDED
#define PROTOBUF_randomization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace fira_message {
namespace sim_to_ref {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_randomization_2eproto();
void protobuf_AssignDesc_randomization_2eproto();
void protobuf_ShutdownFile_randomization_2eproto();

class Randomization;

// ===================================================================

class Randomization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Randomization) */ {
 public:
  Randomization();
  virtual ~Randomization();

  Randomization(const Randomization& from);

  inline Randomization& operator=(const Randomization& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Randomization& default_instance();

  void Swap(Randomization* other);

  // implements Message ----------------------------------------------

  inline Randomization* New() const { return New(NULL); }

  Randomization* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Randomization& from);
  void MergeFrom(const Randomization& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Randomization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double torque = 1;
  void clear_torque();
  static const int kTorqueFieldNumber = 1;
  double torque() const;
  void set_torque(double value);

  // optional double friction = 2;
  void clear_friction();
  static const int kFrictionFieldNumber = 2;
  double friction() const;
  void set_friction(double value);

  // optional double visionNoiseX = 3;
  void clear_visionnoisex();
  static const int kVisionNoiseXFieldNumber = 3;
  double visionnoisex() const;
  void set_visionnoisex(double value);

  // optional double visionNoiseY = 4;
  void clear_visionnoisey();
  static const int kVisionNoiseYFieldNumber = 4;
  double visionnoisey() const;
  void set_visionnoisey(double value);

  // optional double visionNoiseTheta = 5;
  void clear_visionnoisetheta();
  static const int kVisionNoiseThetaFieldNumber = 5;
  double visionnoisetheta() const;
  void set_visionnoisetheta(double value);

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Randomization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double torque_;
  double friction_;
  double visionnoisex_;
  double visionnoisey_;
  double visionnoisetheta_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_randomization_2eproto();
  friend void protobuf_AssignDesc_randomization_2eproto();
  friend void protobuf_ShutdownFile_randomization_2eproto();

  void InitAsDefaultInstance();
  static Randomization* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Randomization

// optional double torque = 1;
inline void Randomization::clear_torque() {
  torque_ = 0;
}
inline double Randomization::torque() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.torque)
  return torque_;
}
inline void Randomization::set_torque(double value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.torque)
}

// optional double friction = 2;
inline void Randomization::clear_friction() {
  friction_ = 0;
}
inline double Randomization::friction() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.friction)
  return friction_;
}
inline void Randomization::set_friction(double value) {
  
  friction_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.friction)
}

// optional double visionNoiseX = 3;
inline void Randomization::clear_visionnoisex() {
  visionnoisex_ = 0;
}
inline double Randomization::visionnoisex() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseX)
  return visionnoisex_;
}
inline void Randomization::set_visionnoisex(double value) {
  
  visionnoisex_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseX)
}

// optional double visionNoiseY = 4;
inline void Randomization::clear_visionnoisey() {
  visionnoisey_ = 0;
}
inline double Randomization::visionnoisey() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseY)
  return visionnoisey_;
}
inline void Randomization::set_visionnoisey(double value) {
  
  visionnoisey_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseY)
}

// optional double visionNoiseTheta = 5;
inline void Randomization::clear_visionnoisetheta() {
  visionnoisetheta_ = 0;
}
inline double Randomization::visionnoisetheta() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseTheta)
  return visionnoisetheta_;
}
inline void Randomization::set_visionnoisetheta(double value) {
  
  visionnoisetheta_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseTheta)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_randomization_2eproto__INCLUDED
