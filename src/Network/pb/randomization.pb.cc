// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: randomization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "randomization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fira_message {
namespace sim_to_ref {

namespace {

const ::google::protobuf::Descriptor* Randomization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Randomization_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_randomization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_randomization_2eproto() {
  protobuf_AddDesc_randomization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "randomization.proto");
  GOOGLE_CHECK(file != NULL);
  Randomization_descriptor_ = file->message_type(0);
  static const int Randomization_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, friction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, visionnoisex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, visionnoisey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, visionnoisetheta_),
  };
  Randomization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Randomization_descriptor_,
      Randomization::default_instance_,
      Randomization_offsets_,
      -1,
      -1,
      -1,
      sizeof(Randomization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Randomization, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_randomization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Randomization_descriptor_, &Randomization::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_randomization_2eproto() {
  delete Randomization::default_instance_;
  delete Randomization_reflection_;
}

void protobuf_AddDesc_randomization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_randomization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fira_message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023randomization.proto\022\027fira_message.sim_"
    "to_ref\032\014common.proto\"w\n\rRandomization\022\016\n"
    "\006torque\030\001 \001(\001\022\020\n\010friction\030\002 \001(\001\022\024\n\014visio"
    "nNoiseX\030\003 \001(\001\022\024\n\014visionNoiseY\030\004 \001(\001\022\030\n\020v"
    "isionNoiseTheta\030\005 \001(\001b\006proto3", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "randomization.proto", &protobuf_RegisterTypes);
  Randomization::default_instance_ = new Randomization();
  Randomization::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_randomization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_randomization_2eproto {
  StaticDescriptorInitializer_randomization_2eproto() {
    protobuf_AddDesc_randomization_2eproto();
  }
} static_descriptor_initializer_randomization_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Randomization::kTorqueFieldNumber;
const int Randomization::kFrictionFieldNumber;
const int Randomization::kVisionNoiseXFieldNumber;
const int Randomization::kVisionNoiseYFieldNumber;
const int Randomization::kVisionNoiseThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Randomization::Randomization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Randomization)
}

void Randomization::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Randomization::Randomization(const Randomization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Randomization)
}

void Randomization::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  torque_ = 0;
  friction_ = 0;
  visionnoisex_ = 0;
  visionnoisey_ = 0;
  visionnoisetheta_ = 0;
}

Randomization::~Randomization() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Randomization)
  SharedDtor();
}

void Randomization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Randomization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Randomization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Randomization_descriptor_;
}

const Randomization& Randomization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_randomization_2eproto();
  return *default_instance_;
}

Randomization* Randomization::default_instance_ = NULL;

Randomization* Randomization::New(::google::protobuf::Arena* arena) const {
  Randomization* n = new Randomization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Randomization::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Randomization)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Randomization, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Randomization*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(torque_, visionnoisetheta_);

#undef ZR_HELPER_
#undef ZR_

}

bool Randomization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Randomization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double torque = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_friction;
        break;
      }

      // optional double friction = 2;
      case 2: {
        if (tag == 17) {
         parse_friction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &friction_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_visionNoiseX;
        break;
      }

      // optional double visionNoiseX = 3;
      case 3: {
        if (tag == 25) {
         parse_visionNoiseX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visionnoisex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_visionNoiseY;
        break;
      }

      // optional double visionNoiseY = 4;
      case 4: {
        if (tag == 33) {
         parse_visionNoiseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visionnoisey_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_visionNoiseTheta;
        break;
      }

      // optional double visionNoiseTheta = 5;
      case 5: {
        if (tag == 41) {
         parse_visionNoiseTheta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visionnoisetheta_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Randomization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Randomization)
  return false;
#undef DO_
}

void Randomization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Randomization)
  // optional double torque = 1;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->torque(), output);
  }

  // optional double friction = 2;
  if (this->friction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->friction(), output);
  }

  // optional double visionNoiseX = 3;
  if (this->visionnoisex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->visionnoisex(), output);
  }

  // optional double visionNoiseY = 4;
  if (this->visionnoisey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->visionnoisey(), output);
  }

  // optional double visionNoiseTheta = 5;
  if (this->visionnoisetheta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->visionnoisetheta(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Randomization)
}

::google::protobuf::uint8* Randomization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Randomization)
  // optional double torque = 1;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->torque(), target);
  }

  // optional double friction = 2;
  if (this->friction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->friction(), target);
  }

  // optional double visionNoiseX = 3;
  if (this->visionnoisex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->visionnoisex(), target);
  }

  // optional double visionNoiseY = 4;
  if (this->visionnoisey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->visionnoisey(), target);
  }

  // optional double visionNoiseTheta = 5;
  if (this->visionnoisetheta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->visionnoisetheta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Randomization)
  return target;
}

int Randomization::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Randomization)
  int total_size = 0;

  // optional double torque = 1;
  if (this->torque() != 0) {
    total_size += 1 + 8;
  }

  // optional double friction = 2;
  if (this->friction() != 0) {
    total_size += 1 + 8;
  }

  // optional double visionNoiseX = 3;
  if (this->visionnoisex() != 0) {
    total_size += 1 + 8;
  }

  // optional double visionNoiseY = 4;
  if (this->visionnoisey() != 0) {
    total_size += 1 + 8;
  }

  // optional double visionNoiseTheta = 5;
  if (this->visionnoisetheta() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Randomization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Randomization)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Randomization* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Randomization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Randomization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Randomization)
    MergeFrom(*source);
  }
}

void Randomization::MergeFrom(const Randomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Randomization)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
  if (from.friction() != 0) {
    set_friction(from.friction());
  }
  if (from.visionnoisex() != 0) {
    set_visionnoisex(from.visionnoisex());
  }
  if (from.visionnoisey() != 0) {
    set_visionnoisey(from.visionnoisey());
  }
  if (from.visionnoisetheta() != 0) {
    set_visionnoisetheta(from.visionnoisetheta());
  }
}

void Randomization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Randomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Randomization::CopyFrom(const Randomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Randomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Randomization::IsInitialized() const {

  return true;
}

void Randomization::Swap(Randomization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Randomization::InternalSwap(Randomization* other) {
  std::swap(torque_, other->torque_);
  std::swap(friction_, other->friction_);
  std::swap(visionnoisex_, other->visionnoisex_);
  std::swap(visionnoisey_, other->visionnoisey_);
  std::swap(visionnoisetheta_, other->visionnoisetheta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Randomization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Randomization_descriptor_;
  metadata.reflection = Randomization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Randomization

// optional double torque = 1;
void Randomization::clear_torque() {
  torque_ = 0;
}
 double Randomization::torque() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.torque)
  return torque_;
}
 void Randomization::set_torque(double value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.torque)
}

// optional double friction = 2;
void Randomization::clear_friction() {
  friction_ = 0;
}
 double Randomization::friction() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.friction)
  return friction_;
}
 void Randomization::set_friction(double value) {
  
  friction_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.friction)
}

// optional double visionNoiseX = 3;
void Randomization::clear_visionnoisex() {
  visionnoisex_ = 0;
}
 double Randomization::visionnoisex() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseX)
  return visionnoisex_;
}
 void Randomization::set_visionnoisex(double value) {
  
  visionnoisex_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseX)
}

// optional double visionNoiseY = 4;
void Randomization::clear_visionnoisey() {
  visionnoisey_ = 0;
}
 double Randomization::visionnoisey() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseY)
  return visionnoisey_;
}
 void Randomization::set_visionnoisey(double value) {
  
  visionnoisey_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseY)
}

// optional double visionNoiseTheta = 5;
void Randomization::clear_visionnoisetheta() {
  visionnoisetheta_ = 0;
}
 double Randomization::visionnoisetheta() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Randomization.visionNoiseTheta)
  return visionnoisetheta_;
}
 void Randomization::set_visionnoisetheta(double value) {
  
  visionnoisetheta_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Randomization.visionNoiseTheta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)
